# -*- mode: ruby -*-
# vi: set ft=ruby :
# VMs predefined variables
Vagrant.require_version ">= 2.2.8"
HOST_NAME = "snipeit"
V_NAME = "snipeit"
IMAGE_NAME = "bento/ubuntu-20.04"
USER_NAME = "vagrant"
USER_PASSWORD = "vagrant"
RAM_SIZE = "4096"
NUMBER_OF_CPU = 2
CORE_OF_CPU = 2
DISK_SIZE = "40GB"

Vagrant.configure("2") do |config|
    config.ssh.username = USER_NAME
    config.ssh.password = USER_PASSWORD
    #Set Displayname in vagrant cmlet
    config.vm.box = IMAGE_NAME
    config.vm.disk :disk, size: DISK_SIZE, primary: true
    config.vm.hostname = HOST_NAME
    config.vm.provider "vmware_workstation"
    config.vm.provider "virtualbox"
################################################################
#Provider setings

# Configure VMware Settings
['vmware_fusion', 'vmware_workstation', 'vmware_desktop'].each do |vmware|
  config.vm.provider vmware do |v|
      v.gui = true                                           #Enable GUI management for VMware Desktop
      v.vmx['displayName'] = HOST_NAME
      v.vmx['memsize'] = RAM_SIZE
      v.vmx["cpuid.coresPerSocket"] = CORE_OF_CPU
      v.vmx['numvcpus'] = NUMBER_OF_CPU                             # two processor cores reserved for vm
      v.vmx['cpuid.coresPerSocket'] = CORE_OF_CPU                   # one socket reserved for vm [1(socket)*2(CPU)=2(CPU)]
      # v.vmx["ethernet0.connectionType"] = "nat"
      # v.vmx["ethernet0.connectionType"] = "bridged"
      # v.vmx["ethernet1.generatedAddress"] = nil                      #Add second network adapter 
      # v.vmx["ethernet1.addressType"] = "static"
      # v.vmx["ethernet1.present"] = "TRUE"
      # v.vmx["ethernet1.connectionType"] = "bridged"
      # v.vmx["ethernet1.address"] = "00:0C:29:DB:08:02"
      # v.vmx['virtualHW.version'] = '16'                   # choose 16 as 'vmware_desktop' version
      # v.vmx['mks.enable3d'] = true                        # enable 3D acceleration
      # v.vmx['vmci0.present'] = true                       # enable Virtual Machine Configuration Interface
      # v.vmx['hpet0.present'] = true                       # enable High Precision Event Timer
      # v.vmx['virtualHW.productCompatibility'] = 'hosted'  # select 'virtualHW.productCompatibility' as 'hosted' this simply means we work with VMware Fusion, Workstation, Player etc.
      # v.vmx['powerType.powerOff'] = 'soft'                # regular power settings 
      # v.vmx['powerType.powerOn'] = 'soft'                 # regular power settings
      # v.vmx['powerType.suspend'] = 'soft'                 # regular power settings
      # v.vmx['powerType.reset'] = 'soft'                   # regular power settings
      v.vmx['guestOS'] = 'ubuntu-64'                      # select 'ubuntu-64' as 'guestOS' in VMware
      # v.vmx['sound.autoDetect'] = true                    # regular sound settings
      # v.vmx['sound.fileName'] = '-1'                      # regular sound settings
      # v.vmx['sound.present'] = true                       # regular sound settings
      v.vmx['vcpu.hotadd'] = true                         # enable VMware Hot Add for CPU
      v.vmx['vhv.enable'] = true                          # enable nested virtulazation on vm
      v.vmx['mem.hotadd'] = true                          # enable VMWare Hot Add for RAM
      # v.vmx['nvme0.present'] = true                       # select nvme for primary drive
      v.vmx['usb.present'] = true                         # enable USB controller
      v.vmx['ehci.present'] = true                        # enable USB controller
      v.vmx['svga.graphicsMemoryKB'] = '262144'           # reserve 256MB for GPU
    end
end

# Configure VirtualBox Settings
config.vm.provider 'virtualbox' do |vb|
  vb.name = V_NAME
  vb.customize ['modifyvm', :id, '--memory', RAM_SIZE]
  vb.customize ['modifyvm', :id, '--cpus', NUMBER_OF_CPU]
  vb.customize ['modifyvm', :id, '--natdnsproxy1', 'on']
  vb.customize ["modifyvm", :id, "--natdnshostresolver1", "on"]
  vb.customize ["modifyvm", :id, "--nic9", "hostonlynet", "--host-only-net9=HostOnly"]
  vb.customize ["modifyvm", :id, "--hwvirtex", "on"]
  vb.gui = true
end
################################################################
# Vagrangt plugins
# if Vagrant.has_plugin?('vagrant-hostsupdater')
#   config.hostsupdater.remove_on_suspend = false
# elsif Vagrant.has_plugin?('vagrant-hostmanager')
#   config.hostmanager.enabled = true
#   config.hostmanager.manage_host = true
# elsif Vagrant.has_plugin?('vagrant-goodhosts')
# end
# if Vagrant.has_plugin?('vagrant-notify-forwarder')
#   config.notify_forwarder.enable = true
################################################################
# Copy public key
  # id_rsa_pub = File.read("#{Dir.home}/.ssh/id_rsa.pub")                     #Copy the public key to VM
  # config.vm.provision "copy ssh public key", type: "shell",                 #Parse the public key with the VM authorized_keys
  #   inline: "if grep -Fxq \"#{id_rsa_pub}\" /home/vagrant/.ssh/authorized_keys
  #   then
  #       echo ssh public key already exists
  #   else
  #     echo \"#{id_rsa_pub}\" >> /home/vagrant/.ssh/authorized_keys
  #   fi"
# Provision by shell script
  # config.vm.provision "shell", inline: <<-SCRIPT
  # #Install prerequisites packages
  # apt-get update \
  # && apt-get -y upgrade
  # apt-get install -y apt-utils \
  # wget \
  # git \
  # curl \
  # tree \
  # locales \
  # nano \
  # net-tools \
  # && timedatectl set-timezone Asia/Ho_Chi_Minh
  # #Remove previous docker version
  # apt-get remove -y docker docker-engine docker.io containerd runc
  # #Install Docker, docker-compose
  # apt-get install -y ca-certificates \
  # curl \
  # gnupg \
  # lsb-release
  # mkdir -p /etc/apt/keyrings
  # curl -fsSL https://download.docker.com/linux/ubuntu/gpg | sudo gpg --dearmor -o /etc/apt/keyrings/docker.gpg
  # echo \
  # "deb [arch=$(dpkg --print-architecture) signed-by=/etc/apt/keyrings/docker.gpg] https://download.docker.com/linux/ubuntu \
  # $(lsb_release -cs) stable" | sudo tee /etc/apt/sources.list.d/docker.list > /dev/null
  # apt-get update
  # apt-get install -y docker-ce docker-ce-cli containerd.io docker-compose docker-compose-plugin
  # #Manage Docker as a non-root user
  # groupadd docker
  # usermod -aG docker vagrant
  # #Install zsh with vagrant user instead of root
  # su -c -m "vagrant" "wget -qO- https://gist.githubusercontent.com/tamld/7be6595bbffe5f9812ee448569c2b09c/raw/install-zsh.sh | bash"
  # SCRIPT
end
